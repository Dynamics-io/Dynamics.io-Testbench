; ModuleID = 'test.clcpp'
source_filename = "test.clcpp"
target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024"
target triple = "spir64"

%class.B = type { i32 }

$_ZnwmPU3AS4v = comdat any

$_ZNU3AS41BC2Ei = comdat any

$_ZNU3AS41B3getEv = comdat any

@.str = private unnamed_addr addrspace(2) constant [5 x i8] c"%i \0A\00", align 1

; Function Attrs: convergent mustprogress noinline norecurse nounwind optnone
define dso_local spir_kernel void @bar(i32 addrspace(1)* noundef align 4 %0, i8 addrspace(3)* noundef %1) #0 !kernel_arg_addr_space !4 !kernel_arg_access_qual !5 !kernel_arg_type !6 !kernel_arg_base_type !6 !kernel_arg_type_qual !7 {
  %3 = alloca i32 addrspace(1)*, align 8
  %4 = alloca i8 addrspace(3)*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %class.B addrspace(4)*, align 8
  store i32 addrspace(1)* %0, i32 addrspace(1)** %3, align 8
  store i8 addrspace(3)* %1, i8 addrspace(3)** %4, align 8
  %7 = call spir_func noundef i64 @_Z13get_global_idj(i32 noundef 0) #5
  store i64 %7, i64* %5, align 8
  %8 = load i8 addrspace(3)*, i8 addrspace(3)** %4, align 8
  %9 = addrspacecast i8 addrspace(3)* %8 to i8 addrspace(4)*
  %10 = call spir_func noundef i8 addrspace(4)* @_ZnwmPU3AS4v(i64 noundef 4, i8 addrspace(4)* noundef %9) #6
  %11 = icmp eq i8 addrspace(4)* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %2
  %13 = bitcast i8 addrspace(4)* %10 to %class.B addrspace(4)*
  call spir_func void @_ZNU3AS41BC2Ei(%class.B addrspace(4)* noundef nonnull align 4 dereferenceable(4) %13, i32 noundef 6) #7
  br label %14

14:                                               ; preds = %12, %2
  %15 = phi %class.B addrspace(4)* [ %13, %12 ], [ null, %2 ]
  store %class.B addrspace(4)* %15, %class.B addrspace(4)** %6, align 8
  %16 = load %class.B addrspace(4)*, %class.B addrspace(4)** %6, align 8
  %17 = call spir_func noundef i32 @_ZNU3AS41B3getEv(%class.B addrspace(4)* noundef nonnull align 4 dereferenceable(4) %16) #7
  %18 = load i32 addrspace(1)*, i32 addrspace(1)** %3, align 8
  %19 = load i64, i64* %5, align 8
  %20 = getelementptr inbounds i32, i32 addrspace(1)* %18, i64 %19
  store i32 %17, i32 addrspace(1)* %20, align 4
  ret void
}

; Function Attrs: convergent nounwind readnone willreturn
declare dso_local spir_func noundef i64 @_Z13get_global_idj(i32 noundef) #1

; Function Attrs: convergent mustprogress noinline norecurse nounwind optnone
define linkonce_odr dso_local spir_func noundef i8 addrspace(4)* @_ZnwmPU3AS4v(i64 noundef %0, i8 addrspace(4)* noundef %1) #2 comdat {
  %3 = alloca i64, align 8
  %4 = alloca i8 addrspace(4)*, align 8
  store i64 %0, i64* %3, align 8
  store i8 addrspace(4)* %1, i8 addrspace(4)** %4, align 8
  %5 = load i8 addrspace(4)*, i8 addrspace(4)** %4, align 8
  ret i8 addrspace(4)* %5
}

; Function Attrs: convergent noinline norecurse nounwind optnone
define linkonce_odr dso_local spir_func void @_ZNU3AS41BC2Ei(%class.B addrspace(4)* noundef nonnull align 4 dereferenceable(4) %0, i32 noundef %1) unnamed_addr #3 comdat align 2 {
  %3 = alloca %class.B addrspace(4)*, align 8
  %4 = alloca i32, align 4
  store %class.B addrspace(4)* %0, %class.B addrspace(4)** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load %class.B addrspace(4)*, %class.B addrspace(4)** %3, align 8
  %6 = getelementptr inbounds %class.B, %class.B addrspace(4)* %5, i32 0, i32 0
  %7 = load i32, i32* %4, align 4
  store i32 %7, i32 addrspace(4)* %6, align 4
  ret void
}

; Function Attrs: convergent mustprogress noinline norecurse nounwind optnone
define linkonce_odr dso_local spir_func noundef i32 @_ZNU3AS41B3getEv(%class.B addrspace(4)* noundef nonnull align 4 dereferenceable(4) %0) #2 comdat align 2 {
  %2 = alloca %class.B addrspace(4)*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store %class.B addrspace(4)* %0, %class.B addrspace(4)** %2, align 8
  %5 = load %class.B addrspace(4)*, %class.B addrspace(4)** %2, align 8
  store i32 2, i32* %3, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %17, %1
  %7 = load i32, i32* %4, align 4
  %8 = getelementptr inbounds %class.B, %class.B addrspace(4)* %5, i32 0, i32 0
  %9 = load i32, i32 addrspace(4)* %8, align 4
  %10 = icmp slt i32 %7, %9
  br i1 %10, label %11, label %20

11:                                               ; preds = %6
  %12 = load i32, i32* %4, align 4
  %13 = call spir_func noundef i32 (i8 addrspace(2)*, ...) @_Z6printfPU3AS2Kcz(i8 addrspace(2)* noundef getelementptr inbounds ([5 x i8], [5 x i8] addrspace(2)* @.str, i64 0, i64 0), i32 noundef %12) #7
  %14 = load i32, i32* %4, align 4
  %15 = load i32, i32* %4, align 4
  %16 = mul nsw i32 %15, %14
  store i32 %16, i32* %4, align 4
  br label %17

17:                                               ; preds = %11
  %18 = load i32, i32* %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %4, align 4
  br label %6, !llvm.loop !8

20:                                               ; preds = %6
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}

; Function Attrs: convergent
declare dso_local spir_func noundef i32 @_Z6printfPU3AS2Kcz(i8 addrspace(2)* noundef, ...) #4

attributes #0 = { convergent mustprogress noinline norecurse nounwind optnone "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "uniform-work-group-size"="true" }
attributes #1 = { convergent nounwind readnone willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #2 = { convergent mustprogress noinline norecurse nounwind optnone "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #3 = { convergent noinline norecurse nounwind optnone "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #4 = { convergent "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #5 = { convergent nounwind readnone willreturn }
attributes #6 = { convergent nounwind }
attributes #7 = { convergent }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!opencl.spir.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"frame-pointer", i32 2}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 15.0.7"}
!4 = !{i32 1, i32 3}
!5 = !{!"none", !"none"}
!6 = !{!"int*", !"void*"}
!7 = !{!"", !""}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.mustprogress"}
