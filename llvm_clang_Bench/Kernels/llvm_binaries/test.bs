; ModuleID = 'test.clcpp'
source_filename = "test.clcpp"
target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024"
target triple = "spir64"

%class.B = type { i32 }

$_ZNU3AS41BC2Ei = comdat any

$_ZNU3AS41B3getEv = comdat any

@.str = private unnamed_addr addrspace(2) constant [5 x i8] c"%i \0A\00", align 1

; Function Attrs: convergent mustprogress noinline norecurse nounwind optnone
define dso_local spir_kernel void @bar(ptr addrspace(1) noundef align 4 %0) #0 !kernel_arg_addr_space !4 !kernel_arg_access_qual !5 !kernel_arg_type !6 !kernel_arg_base_type !6 !kernel_arg_type_qual !7 {
  %2 = alloca ptr addrspace(1), align 8
  %3 = alloca i64, align 8
  %4 = alloca %class.B, align 4
  store ptr addrspace(1) %0, ptr %2, align 8
  %5 = call spir_func noundef i64 @_Z13get_global_idj(i32 noundef 0) #5
  store i64 %5, ptr %3, align 8
  %6 = addrspacecast ptr %4 to ptr addrspace(4)
  call spir_func void @_ZNU3AS41BC2Ei(ptr addrspace(4) noundef nonnull align 4 dereferenceable(4) %6, i32 noundef 6) #6
  %7 = addrspacecast ptr %4 to ptr addrspace(4)
  %8 = call spir_func noundef i32 @_ZNU3AS41B3getEv(ptr addrspace(4) noundef nonnull align 4 dereferenceable(4) %7) #6
  %9 = load ptr addrspace(1), ptr %2, align 8
  %10 = load i64, ptr %3, align 8
  %11 = getelementptr inbounds i32, ptr addrspace(1) %9, i64 %10
  store i32 %8, ptr addrspace(1) %11, align 4
  ret void
}

; Function Attrs: convergent nounwind willreturn memory(none)
declare dso_local spir_func noundef i64 @_Z13get_global_idj(i32 noundef) #1

; Function Attrs: convergent noinline norecurse nounwind optnone
define linkonce_odr dso_local spir_func void @_ZNU3AS41BC2Ei(ptr addrspace(4) noundef nonnull align 4 dereferenceable(4) %0, i32 noundef %1) unnamed_addr #2 comdat align 2 {
  %3 = alloca ptr addrspace(4), align 8
  %4 = alloca i32, align 4
  store ptr addrspace(4) %0, ptr %3, align 8
  store i32 %1, ptr %4, align 4
  %5 = load ptr addrspace(4), ptr %3, align 8
  %6 = getelementptr inbounds %class.B, ptr addrspace(4) %5, i32 0, i32 0
  %7 = load i32, ptr %4, align 4
  store i32 %7, ptr addrspace(4) %6, align 4
  ret void
}

; Function Attrs: convergent mustprogress noinline norecurse nounwind optnone
define linkonce_odr dso_local spir_func noundef i32 @_ZNU3AS41B3getEv(ptr addrspace(4) noundef nonnull align 4 dereferenceable(4) %0) #3 comdat align 2 {
  %2 = alloca ptr addrspace(4), align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store ptr addrspace(4) %0, ptr %2, align 8
  %5 = load ptr addrspace(4), ptr %2, align 8
  store i32 2, ptr %3, align 4
  store i32 0, ptr %4, align 4
  br label %6

6:                                                ; preds = %17, %1
  %7 = load i32, ptr %4, align 4
  %8 = getelementptr inbounds %class.B, ptr addrspace(4) %5, i32 0, i32 0
  %9 = load i32, ptr addrspace(4) %8, align 4
  %10 = icmp slt i32 %7, %9
  br i1 %10, label %11, label %20

11:                                               ; preds = %6
  %12 = load i32, ptr %4, align 4
  %13 = call spir_func noundef i32 (ptr addrspace(2), ...) @_Z6printfPU3AS2Kcz(ptr addrspace(2) noundef @.str, i32 noundef %12) #6
  %14 = load i32, ptr %4, align 4
  %15 = load i32, ptr %4, align 4
  %16 = mul nsw i32 %15, %14
  store i32 %16, ptr %4, align 4
  br label %17

17:                                               ; preds = %11
  %18 = load i32, ptr %4, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, ptr %4, align 4
  br label %6, !llvm.loop !8

20:                                               ; preds = %6
  %21 = load i32, ptr %3, align 4
  ret i32 %21
}

; Function Attrs: convergent nounwind
declare dso_local spir_func noundef i32 @_Z6printfPU3AS2Kcz(ptr addrspace(2) noundef, ...) #4

attributes #0 = { convergent mustprogress noinline norecurse nounwind optnone "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "uniform-work-group-size"="true" }
attributes #1 = { convergent nounwind willreturn memory(none) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #2 = { convergent noinline norecurse nounwind optnone "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #3 = { convergent mustprogress noinline norecurse nounwind optnone "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #4 = { convergent nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #5 = { convergent nounwind willreturn memory(none) }
attributes #6 = { convergent nounwind }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!opencl.spir.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"frame-pointer", i32 2}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 17.0.0 (https://github.com/llvm/llvm-project.git be83a4b257c8f0dfd74a659261a544483c5df9af)"}
!4 = !{i32 1}
!5 = !{!"none"}
!6 = !{!"int*"}
!7 = !{!""}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.mustprogress"}
